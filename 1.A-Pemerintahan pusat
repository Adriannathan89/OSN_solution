#include <bits/stdc++.h>
using namespace std;
#define int long long
const int sz = 1e5 + 10;

int n;
vector<int> adj[sz];
int w[sz], d[sz], sm[sz], dp[sz][2];
bool vis[sz];
priority_queue<int, vector<int>, greater<>> p[sz], q[sz];

void dfs2(int node) {
    vis[node] = 1;
    bool lf = 1;
    for(auto x : adj[node]) {
        if(!vis[x]) {
        lf = 0;
        dfs2(x);
        dp[node][0] += dp[x][0];
        dp[node][1] += dp[x][1];
        p[node].push(dp[x][0] - dp[x][1]);
        q[node].push(dp[x][1] - dp[x][0]);
        }
    }
    if(lf) {
        dp[node][0] = w[node];
        dp[node][1] = -(w[node]);
    } else {
        dp[node][0] += w[node];
        dp[node][1] -= w[node];
        int l = d[node];
        while(l > 0) {
            dp[node][0] -= p[node].top();
            p[node].pop();
            l--;
        }
        int r = d[node];
        while(r > 0) {
            dp[node][1] -= q[node].top();
            q[node].pop();
            r--;
        }
    }
}

signed main() {
    cin >> n;
    
    for(int i = 2; i <= n; i++) {
        int x;
        cin >> x;
        adj[x].push_back(i);
        adj[i].push_back(x);
    }

    for(int i = 1; i <= n; i++) {
        cin >> w[i];
    }

    for(int i = 1; i <= n; i++) {
        cin >> d[i];
    }

    dfs2(1);
    cout << max(dp[1][1], dp[1][0]);
}
